# Generated by Django 4.2.10 on 2024-03-27 15:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import study.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Укажите название курса",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zА-Яа-я]+(\\s[A-Za-zА-Яа-я]+)*$",
                                "Поле должно содержать только буквы кириллицы/латиницы",
                            )
                        ],
                        verbose_name="Название",
                    ),
                ),
                (
                    "date_time_start",
                    models.DateTimeField(
                        validators=[study.validators.validate_date_time_start],
                        verbose_name="Дата начала",
                    ),
                ),
                (
                    "cost",
                    models.PositiveSmallIntegerField(
                        help_text="Укажите стоимость курса",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=1, message="Укажите значение 1 и более"
                            )
                        ],
                        verbose_name="Стоимость курса",
                    ),
                ),
                (
                    "min_group_people",
                    models.PositiveSmallIntegerField(
                        help_text="Укажите минимальное число студентов для набора",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=1, message="Укажите значение 1 и более"
                            )
                        ],
                        verbose_name="Минимальное количество человек в группе",
                    ),
                ),
                (
                    "max_group_people",
                    models.PositiveSmallIntegerField(
                        help_text="Укажите минимальное число студентов для набора",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=1, message="Укажите значение 1 и более"
                            )
                        ],
                        verbose_name="Максимальное количество человек в группе",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор курса",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Courses",
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Укажите название группы",
                        max_length=150,
                        unique=True,
                        verbose_name="Название группы",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group",
                        to="study.course",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Groups",
            },
        ),
        migrations.CreateModel(
            name="PassAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_valid",
                    models.BooleanField(
                        default=False, verbose_name="Выдан/Отнят доступ к курсу"
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pass_access",
                        to="study.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pass_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "PassAccess",
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Укажите название урока",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-zА-Яа-я]+(\\s[A-Za-zА-Яа-я]+)*$",
                                "Поле должно содержать только буквы кириллицы/латиницы",
                            )
                        ],
                        verbose_name="Название урока",
                    ),
                ),
                (
                    "link_to_video",
                    models.URLField(
                        help_text="Укажите ссылку на видео",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.core.validators.URLValidator(
                                message="Некорректная ссылка"
                            )
                        ],
                        verbose_name="Cсылка на видео урок",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson",
                        to="study.course",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Lessons",
            },
        ),
        migrations.CreateModel(
            name="GroupStudents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="study.group"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="group",
            name="student",
            field=models.ManyToManyField(
                through="study.GroupStudents", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="passaccess",
            constraint=models.UniqueConstraint(
                fields=("student", "course"), name="unique_student_course"
            ),
        ),
        migrations.AddConstraint(
            model_name="groupstudents",
            constraint=models.UniqueConstraint(
                fields=("student", "group"), name="unique_student_group"
            ),
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.UniqueConstraint(
                fields=("author", "name"), name="unique_author_course"
            ),
        ),
        migrations.AddConstraint(
            model_name="course",
            constraint=models.CheckConstraint(
                check=models.Q(("min_group_people__lte", models.F("max_group_people"))),
                name="Минимальное количество участников не должно быть больше максимального",
            ),
        ),
    ]
